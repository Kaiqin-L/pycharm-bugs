1. 输出斐波那契数列  1 1 2 3 5 8 13 21 34 55 ... 的第任意个数
   思考：f(1)和f(2)的值为1，其余的值由前两个元素相加得到
   
   初始版本：
   def Fib(n):
    if n==1:
        return 1
    elif n==2:
        return 1
    else:
        W=Fib(n-1)  #如果直接将Fib（n-1）+Fib（n-2）赋值给W，会报错：notype不能与int相加
        Q=Fib(n-2)
        Value=W+Q
        return Value
    
    print(Fib(10))
    >>>55
    
    尝试用下列语句把数列输出来：
    for i in 1:10
    print(Fib(i))
  报错：
    for i in 1:10
TypeError: 'int' object is not iterable

   改为：
    for i in range(1,11): #因为忘了for循环语句被陈元明狠狠嘲笑，之前写成for i in (1,2,3,4,5,6,7,8,9,10):
    print(Fib(i),end=' ')
    
  >>>1 1 2 3 5 8 13 21 34 55
  
  但是这种方式的时间复杂度是很高的（多少？看复杂度的资料）。在遍历f(n-1)与f(n-2)的子节点时，节点会有重合的地方。因此可以通过减少重复计算来减少时间复杂度。
  可以创建列表。列表的长度与想输出的第i个数有关。对列表中的前两个元素进行初始化，并顺序对列表中的元素进行加减操作，不需要使用到递归，从而将时间复杂度降低到O(n)。

  def fib1(n):
    fb = [0] * (n + 1)                          #初始化
    for i in range(1, n + 1, 1):                #注意下标
        if i == 1:
            fb[1] = 1
        elif i == 2:
            fb[2] = 1
        else:
            fb[i] = fb[i - 1] + fb[i - 2]
    return fb[n]                                 #注意返回值不是fb[i]


test1 = fib1(10)                                 #结果为55
print(test1)

  但是这种做法的空间复杂度也是O(n)的，如果存储特别多的元素，那么存储整个列表会消耗很多的字节，而本身目标只是为了获得第i个元素。前面的许多元素都不需要一直被存储。因此可以使用如下方式：
  
  def fib_2(m):
    a = b = 1
    c = 0                              #注意变量的初始化
    for i in range(1, m + 1, 1):
        if i == 1:
            c = a
        elif i == 2:
            c = b
        else:
            c = a + b
            a = b
            b = c
    return c


test2 = fib_2(7)          #结果为7
print(test2)
将空间复杂度大大降低。

检测函数是否有误，执行下列语句：
for j in range(1, 11, 1):        #输出10个元素
    print(fib_2(j), end=' ')
>>> 1 1 2 3 5 8 13 21 34 55 



  另外，还查到另外一种方式来求解。
  
    from itertools import islice
    class Fib:
      def __init__(self):
          self.prev=0
          self.curr=1
      def __iter__(self):
          return self
      def __next__(self):
          x=self.curr
          self.curr+=self.prev
          self.prev=x
          return x
  f=Fib()
  for item in islice(f,0,10):
      print(item, end=' ')
  这两种方式之间有什么区别？哪种更好？使用的工具是什么用途？
  
2. 背包问题：背包承受重量为S（S>0），有n件物品，其重量列表为W=[w1,w2,...wn]。要从物品中挑选若干件放入背包，使得重量之和为S。有解时返回True，并显示所选物品。无解时返回False。

   思考：考虑当前物品i，如果放入后总重量<=s,那么可放，如果加入后大于s，就不能放。
   
    def f(w,s,n):
      if s==0:
          return True
      elif ((s<0)or(n<=1)):
          return False
      elif f(w,s-w[n-1],n-1):
          print(w[n-1],end=" ")
          return True
      else:
          return f(w,s,n-1)

  Weights=[1,5,7,6,4]
  Bag=15
  Num=5
  print(f(Weights,Bag,Num))
  
  >>>5 6 4 True
